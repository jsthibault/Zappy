!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=		-Wall -Wextra -I.\/include\/$/;"	m
CLIENT	Makefile	/^CLIENT=		client$/;"	m
COLOR_BLUE	include/utils.h	18;"	d
COLOR_GREEN	include/utils.h	19;"	d
COLOR_NORMAL	include/utils.h	21;"	d
COLOR_RED	include/utils.h	20;"	d
DEFAULT_DELAI	include/options.h	25;"	d
DEFAULT_HEIGHT	include/options.h	23;"	d
DEFAULT_MAX_CLIENTS	include/options.h	24;"	d
DEFAULT_PORT	include/options.h	21;"	d
DEFAULT_WIDTH	include/options.h	22;"	d
DIR_CLIENT	Makefile	/^DIR_CLIENT=	src\/client$/;"	m
DIR_SERVER	Makefile	/^DIR_SERVER=	src\/server$/;"	m
FALSE	include/utils.h	/^  FALSE,$/;"	e	enum:e_bool
OBJ_CLIENT	Makefile	/^OBJ_CLIENT=	$(addprefix $(DIR_CLIENT)\/, $(SRC_CLIENT:.c=.o))$/;"	m
OBJ_SERVER	Makefile	/^OBJ_SERVER=	$(addprefix $(DIR_SERVER)\/, $(SRC_SERVER:.c=.o))$/;"	m
OPTIONS_H_	include/options.h	12;"	d
RM	Makefile	/^RM=	\/bin\/rm -rf$/;"	m
SERVER	Makefile	/^SERVER=		server$/;"	m
SRC_CLIENT	Makefile	/^SRC_CLIENT=$/;"	m
SRC_SERVER	Makefile	/^SRC_SERVER=	init_options.c \\$/;"	m
TRUE	include/utils.h	/^  TRUE$/;"	e	enum:e_bool
UTILS_H_	include/utils.h	12;"	d
convert_to_int	include/options.h	/^t_bool	convert_to_int(char *av[], int ac, int *i, size_t *n);$/;"	p	signature:(char *av[], int ac, int *i, size_t *n)
convert_to_int	src/server/options_other.c	/^t_bool	convert_to_int(char *av[], int ac, int *i, size_t *n)$/;"	f	signature:(char *av[], int ac, int *i, size_t *n)
delai	include/options.h	/^  size_t	delai;$/;"	m	struct:s_options	access:public
dump_options	include/options.h	/^void		dump_options(t_options *options);$/;"	p	signature:(t_options *options)
dump_options	src/server/parse_options.c	/^void		dump_options(t_options *options)$/;"	f	signature:(t_options *options)
e_bool	include/utils.h	/^typedef enum	e_bool$/;"	g
height	include/options.h	/^  size_t	height;$/;"	m	struct:s_options	access:public
init_options	include/options.h	/^void		init_options(t_options *);$/;"	p	signature:(t_options *)
init_options	src/server/init_options.c	/^void	init_options(t_options *options)$/;"	f	signature:(t_options *options)
is_float	include/utils.h	/^t_bool		is_float(char *);$/;"	p	signature:(char *)
is_float	src/server/utils.c	/^t_bool		is_float(char *str)$/;"	f	signature:(char *str)
is_num	include/utils.h	/^t_bool		is_num(char *);$/;"	p	signature:(char *)
is_num	src/server/utils.c	/^t_bool		is_num(char *str)$/;"	f	signature:(char *str)
main	src/server/main.c	/^int		main(int argc, const char *argv[])$/;"	f	signature:(int argc, const char *argv[])
max_clients	include/options.h	/^  size_t	max_clients;$/;"	m	struct:s_options	access:public
nb_team_names	include/options.h	/^  size_t	nb_team_names;$/;"	m	struct:s_options	access:public
option	include/options.h	/^  char		*option;$/;"	m	struct:s_tabfunctions	access:public
option_c	include/options.h	/^t_bool	option_c(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_c	src/server/options_with_int.c	/^t_bool	option_c(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
option_n	include/options.h	/^t_bool	option_n(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_n	src/server/options_other.c	/^t_bool		option_n(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
option_p	include/options.h	/^t_bool	option_p(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_p	src/server/options_with_int.c	/^t_bool	option_p(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
option_t	include/options.h	/^t_bool	option_t(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_t	src/server/options_with_int.c	/^t_bool		option_t(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
option_x	include/options.h	/^t_bool	option_x(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_x	src/server/options_with_int.c	/^t_bool	option_x(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
option_y	include/options.h	/^t_bool	option_y(char **, int, int *, t_options *);$/;"	p	signature:(char **, int, int *, t_options *)
option_y	src/server/options_with_int.c	/^t_bool	option_y(char **av, int ac, int *i, t_options *options)$/;"	f	signature:(char **av, int ac, int *i, t_options *options)
p	include/options.h	/^  t_bool	(*p)();$/;"	m	struct:s_tabfunctions	access:public
parse_options	include/options.h	/^t_bool		parse_options(const int, const char **, t_options *);$/;"	p	signature:(const int, const char **, t_options *)
parse_options	src/server/parse_options.c	/^t_bool		parse_options(const int ac, const char *av[], t_options *options)$/;"	f	signature:(const int ac, const char *av[], t_options *options)
port	include/options.h	/^  size_t	port;$/;"	m	struct:s_options	access:public
print_man	src/server/main.c	/^static void	print_man()$/;"	f	file:
s_options	include/options.h	/^typedef struct	s_options$/;"	s
s_options::delai	include/options.h	/^  size_t	delai;$/;"	m	struct:s_options	access:public
s_options::height	include/options.h	/^  size_t	height;$/;"	m	struct:s_options	access:public
s_options::max_clients	include/options.h	/^  size_t	max_clients;$/;"	m	struct:s_options	access:public
s_options::nb_team_names	include/options.h	/^  size_t	nb_team_names;$/;"	m	struct:s_options	access:public
s_options::port	include/options.h	/^  size_t	port;$/;"	m	struct:s_options	access:public
s_options::team_names	include/options.h	/^  char		team_names[100][100];$/;"	m	struct:s_options	access:public
s_options::width	include/options.h	/^  size_t	width;$/;"	m	struct:s_options	access:public
s_tabfunctions	include/options.h	/^typedef struct	s_tabfunctions$/;"	s
s_tabfunctions::option	include/options.h	/^  char		*option;$/;"	m	struct:s_tabfunctions	access:public
s_tabfunctions::p	include/options.h	/^  t_bool	(*p)();$/;"	m	struct:s_tabfunctions	access:public
t_bool	include/utils.h	/^}		t_bool;$/;"	t	typeref:enum:e_bool
t_options	include/options.h	/^}		t_options;$/;"	t	typeref:struct:s_options
t_tabfunctions	include/options.h	/^}		t_tabfunctions;$/;"	t	typeref:struct:s_tabfunctions
tabfunctions	src/server/parse_options.c	/^static const t_tabfunctions	tabfunctions[] = {$/;"	v	file:
team_names	include/options.h	/^  char		team_names[100][100];$/;"	m	struct:s_options	access:public
width	include/options.h	/^  size_t	width;$/;"	m	struct:s_options	access:public
